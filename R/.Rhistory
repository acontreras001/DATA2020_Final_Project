# Create the 'raw' directory if it doesn't already exist
if (!dir.exists("data/raw")) {
dir.create("data/raw")
}
# Create the 'codebooks' directory if it doesn't already exist
if (!dir.exists("data/codebooks")) {
dir.create("data/codebooks")
}
# Create the 'codebooks' directory if it doesn't already exist
if (!dir.exists("data/processed")) {
dir.create("data/processed")
}
# Chunk 4
# List all files in the zip file
files <- unzip("FFdata.zip", list = TRUE)$Name
# Filter out files in the __MACOSX directory
files_to_extract <- files[!grepl("^__MACOSX/", files)]
# Unzip only the filtered files
unzip("FFdata.zip", files = files_to_extract)
# Loop through each wave folder and extract .dta files. Place in `raw` folder
for (i in 1:6) {
# Define the wave folder name
wave_folder <- paste0("wave", i)
# Get the path to the zip file within the wave folder
zip_file_path <- list.files(path = wave_folder, pattern = "\\.zip$", full.names = TRUE)
# Unzip the .dta file(s) from the zip file directly into the 'raw' folder
if (length(zip_file_path) > 0) { # Check if there is at least one zip file
unzip(zip_file_path, exdir = "data/raw")
}
}
# Loop through each wave folder and extract .txt files. Place in `codebooks` folder
for (i in 1:6) {
# Define the wave folder name
wave_folder <- paste0("wave", i)
# Get the path to the .txt file within the wave folder
# Assuming there's only one .txt file per folder for simplicity
txt_file_path <- list.files(path = wave_folder, pattern = "\\.txt$", full.names = TRUE)
# Move or copy the .txt file to the 'codebooks' folder
# Here we use file.copy() for copying; use file.rename() if you want to move instead
if (length(txt_file_path) > 0) { # Check if there is at least one txt file
file_name <- basename(txt_file_path)
dest_path <- file.path("data/codebooks", file_name)
file.copy(txt_file_path, dest_path)
}
}
# Move screenshot of data waves
source_file <- "Screen Shot 2021-02-23 at 3.44.48 PM.png"
destination_file <- "data/Screen Shot 2021-02-23 at 3.44.48 PM.png"
file.rename(source_file, destination_file)
# Chunk 5
# Define the folder path
folder_path <- "FFdata"
# Check if the folder exists
if (dir.exists(folder_path)) {
# Delete the folder and its contents
unlink(folder_path, recursive = TRUE)
cat("Folder 'FFdata' has been deleted.\n")
} else {
cat("Folder 'FFdata' does not exist.\n")
}
# Define the directories to remove
wave_directories <- paste0("wave", 1:6)
# Loop through each directory and remove it
for(dir in wave_directories) {
unlink(dir, recursive = TRUE)
}
# Chunk 6
# Create the 'codebooks' directory if it doesn't already exist
if (!dir.exists("outputs")) {
dir.create("outputs")
}
# Create the 'codebooks' directory if it doesn't already exist
if (!dir.exists("outputs/EDA")) {
dir.create("outputs/EDA")
}
# Create the 'codebooks' directory if it doesn't already exist
if (!dir.exists("outputs/analyses")) {
dir.create("outputs/analyses")
}
# Chunk 7
# Define the path to the README.md file
readme_path <- "README.md"
# Check if the README.md file already exists
if (!file.exists(readme_path)) {
# If it does not exist, create the file and add some initial content
writeLines(c("# Project Title", "\n", "A brief description of the project."), readme_path)
message("README.md has been created.")
} else {
# If the file exists, do nothing but print a message
message("README.md already exists.")
}
# Chunk 8
# Define the path to the EDA.Rmd file
eda_rmd_path <- "2_EDA.Rmd"
# Check if the EDA.Rmd file already exists
if (!file.exists(eda_rmd_path)) {
# If it does not exist, create the file and add some initial content
initial_content <- c(
"---",
"title: \"Exploratory Data Analysis\"",
"output: html_document",
"---",
"",
"# Introduction",
"This document presents an exploratory data analysis of the dataset.",
"",
"# Data Loading",
"```{r}",
"# Code to load data",
"```",
"",
"# Summary Statistics",
"```{r}",
"# Code to summarize the data",
"```",
"",
"# Data Visualization",
"```{r}",
"# Code for data visualization",
"```"
)
writeLines(initial_content, eda_rmd_path)
message("2_EDA.Rmd has been created with initial content.")
} else {
# If the file exists, do nothing but print a message
message("2_EDA.Rmd already exists.")
}
# Chunk 9
# Define the path to the data_cleaning.Rmd file
data_cleaning_rmd_path <- "3_data_cleaning.Rmd"
# Check if the data_cleaning.Rmd file already exists
if (!file.exists(data_cleaning_rmd_path)) {
# If it does not exist, create the file and add some initial content
initial_content <- c(
"---",
"title: \"Data Cleaning\"",
"output: html_document",
"---",
"",
"# Introduction",
"This document outlines the data cleaning steps for the project dataset.",
"",
"# Identify Missing Values",
"```{r}",
"# Code to identify missing values",
"```",
"",
"# Handling Missing Values",
"```{r}",
"# Code to handle missing values (e.g., imputation)",
"```",
"",
"# Removing Duplicates",
"```{r}",
"# Code to remove duplicate entries",
"```",
"",
"# Correcting Data Types",
"```{r}",
"# Code to correct data types where necessary",
"```",
"",
"# Summary of Cleaned Data",
"```{r}",
"# Code to summarize the cleaned data",
"```"
)
writeLines(initial_content, data_cleaning_rmd_path)
message("3_data_cleaning.Rmd has been created with initial content.")
} else {
# If the file exists, do nothing but print a message
message("3_data_cleaning.Rmd already exists.")
}
# Chunk 10
# Define the path to the analyses.Rmd file
analyses_rmd_path <- "4_analyses.Rmd"
# Check if the analyses.Rmd file already exists
if (!file.exists(analyses_rmd_path)) {
# If it does not exist, create the file and add some initial content
initial_content <- c(
"---",
"title: \"Data Analysis\"",
"output: html_document",
"---",
"",
"# Introduction",
"This document provides an overview of the analyses conducted on the project dataset.",
"",
"# Data Overview",
"```{r}",
"# Code to display basic information about the dataset",
"```",
"",
"# Descriptive Statistics",
"```{r}",
"# Code for descriptive statistics",
"```",
"",
"# Hypothesis Testing",
"```{r}",
"# Code for conducting hypothesis tests",
"```",
"",
"# Predictive Modeling",
"```{r}",
"# Code to build predictive models",
"```",
"",
"# Results",
"Discuss the results of the analyses, including any significant findings and implications.",
"",
"# Conclusion",
"Summarize the main conclusions drawn from the analyses, including any recommendations for further research or practical applications."
)
writeLines(initial_content, analyses_rmd_path)
message("4_analyses.Rmd has been created with initial content.")
} else {
# If the file exists, do nothing but print a message
message("4_analyses.Rmd already exists.")
}
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: Dependency Setup
if (!require("here")) install.packages("here")
library(here)
# Set current working directory to .rmd file location
setwd(here::here())
# Define the path to the .renv lockfile within the 'renv' folder
renv_lockfile <- file.path(getwd(), "renv.lock")
#Restore packages from renv lock file
if (!require("renv")) install.packages("renv")
renv::restore()
#Use the p_load function to install and load any desired packages that may not
#have been in the renv.lock file. Note, if the packages were already in the
#renv.lock file, that is okay. `p_load` will not change version number
#if (!require("pacman")) install.packages("pacman")
#pacman::p_load() #Insert packages in between parentheses
#Update the renv lock file
renv::snapshot()
# Chunk 3
# Create the 'data' directory if it doesn't already exist
if (!dir.exists("data")) {
dir.create("data")
}
# Create the 'raw' directory if it doesn't already exist
if (!dir.exists("data/raw")) {
dir.create("data/raw")
}
# Create the 'codebooks' directory if it doesn't already exist
if (!dir.exists("data/codebooks")) {
dir.create("data/codebooks")
}
# Create the 'codebooks' directory if it doesn't already exist
if (!dir.exists("data/processed")) {
dir.create("data/processed")
}
# Chunk 4
# List all files in the zip file
files <- unzip("FFdata.zip", list = TRUE)$Name
# Filter out files in the __MACOSX directory
files_to_extract <- files[!grepl("^__MACOSX/", files)]
# Unzip only the filtered files
unzip("FFdata.zip", files = files_to_extract)
# Loop through each wave folder and extract .dta files. Place in `raw` folder
for (i in 1:6) {
# Define the wave folder name
wave_folder <- paste0("wave", i)
# Get the path to the zip file within the wave folder
zip_file_path <- list.files(path = wave_folder, pattern = "\\.zip$", full.names = TRUE)
# Unzip the .dta file(s) from the zip file directly into the 'raw' folder
if (length(zip_file_path) > 0) { # Check if there is at least one zip file
unzip(zip_file_path, exdir = "data/raw")
}
}
# Loop through each wave folder and extract .txt files. Place in `codebooks` folder
for (i in 1:6) {
# Define the wave folder name
wave_folder <- paste0("wave", i)
# Get the path to the .txt file within the wave folder
# Assuming there's only one .txt file per folder for simplicity
txt_file_path <- list.files(path = wave_folder, pattern = "\\.txt$", full.names = TRUE)
# Move or copy the .txt file to the 'codebooks' folder
# Here we use file.copy() for copying; use file.rename() if you want to move instead
if (length(txt_file_path) > 0) { # Check if there is at least one txt file
file_name <- basename(txt_file_path)
dest_path <- file.path("data/codebooks", file_name)
file.copy(txt_file_path, dest_path)
}
}
# Move screenshot of data waves
source_file <- "Screen Shot 2021-02-23 at 3.44.48 PM.png"
destination_file <- "data/Screen Shot 2021-02-23 at 3.44.48 PM.png"
file.rename(source_file, destination_file)
# Chunk 5
# Define the folder path
folder_path <- "FFdata"
# Check if the folder exists
if (dir.exists(folder_path)) {
# Delete the folder and its contents
unlink(folder_path, recursive = TRUE)
cat("Folder 'FFdata' has been deleted.\n")
} else {
cat("Folder 'FFdata' does not exist.\n")
}
# Define the directories to remove
wave_directories <- paste0("wave", 1:6)
# Loop through each directory and remove it
for(dir in wave_directories) {
unlink(dir, recursive = TRUE)
}
# Chunk 6
# Create the 'codebooks' directory if it doesn't already exist
if (!dir.exists("outputs")) {
dir.create("outputs")
}
# Create the 'codebooks' directory if it doesn't already exist
if (!dir.exists("outputs/EDA")) {
dir.create("outputs/EDA")
}
# Create the 'codebooks' directory if it doesn't already exist
if (!dir.exists("outputs/analyses")) {
dir.create("outputs/analyses")
}
# Chunk 7
# Define the path to the README.md file
readme_path <- "README.md"
# Check if the README.md file already exists
if (!file.exists(readme_path)) {
# If it does not exist, create the file and add some initial content
writeLines(c("# Project Title", "\n", "A brief description of the project."), readme_path)
message("README.md has been created.")
} else {
# If the file exists, do nothing but print a message
message("README.md already exists.")
}
# Chunk 8
# Define the path to the EDA.Rmd file
eda_rmd_path <- "2_EDA.Rmd"
# Check if the EDA.Rmd file already exists
if (!file.exists(eda_rmd_path)) {
# If it does not exist, create the file and add some initial content
initial_content <- c(
"---",
"title: \"Exploratory Data Analysis\"",
"output: html_document",
"---",
"",
"# Introduction",
"This document presents an exploratory data analysis of the dataset.",
"",
"# Data Loading",
"```{r}",
"# Code to load data",
"```",
"",
"# Summary Statistics",
"```{r}",
"# Code to summarize the data",
"```",
"",
"# Data Visualization",
"```{r}",
"# Code for data visualization",
"```"
)
writeLines(initial_content, eda_rmd_path)
message("2_EDA.Rmd has been created with initial content.")
} else {
# If the file exists, do nothing but print a message
message("2_EDA.Rmd already exists.")
}
# Chunk 9
# Define the path to the data_cleaning.Rmd file
data_cleaning_rmd_path <- "3_data_cleaning.Rmd"
# Check if the data_cleaning.Rmd file already exists
if (!file.exists(data_cleaning_rmd_path)) {
# If it does not exist, create the file and add some initial content
initial_content <- c(
"---",
"title: \"Data Cleaning\"",
"output: html_document",
"---",
"",
"# Introduction",
"This document outlines the data cleaning steps for the project dataset.",
"",
"# Identify Missing Values",
"```{r}",
"# Code to identify missing values",
"```",
"",
"# Handling Missing Values",
"```{r}",
"# Code to handle missing values (e.g., imputation)",
"```",
"",
"# Removing Duplicates",
"```{r}",
"# Code to remove duplicate entries",
"```",
"",
"# Correcting Data Types",
"```{r}",
"# Code to correct data types where necessary",
"```",
"",
"# Summary of Cleaned Data",
"```{r}",
"# Code to summarize the cleaned data",
"```"
)
writeLines(initial_content, data_cleaning_rmd_path)
message("3_data_cleaning.Rmd has been created with initial content.")
} else {
# If the file exists, do nothing but print a message
message("3_data_cleaning.Rmd already exists.")
}
# Chunk 10
# Define the path to the analyses.Rmd file
analyses_rmd_path <- "4_analyses.Rmd"
# Check if the analyses.Rmd file already exists
if (!file.exists(analyses_rmd_path)) {
# If it does not exist, create the file and add some initial content
initial_content <- c(
"---",
"title: \"Data Analysis\"",
"output: html_document",
"---",
"",
"# Introduction",
"This document provides an overview of the analyses conducted on the project dataset.",
"",
"# Data Overview",
"```{r}",
"# Code to display basic information about the dataset",
"```",
"",
"# Descriptive Statistics",
"```{r}",
"# Code for descriptive statistics",
"```",
"",
"# Hypothesis Testing",
"```{r}",
"# Code for conducting hypothesis tests",
"```",
"",
"# Predictive Modeling",
"```{r}",
"# Code to build predictive models",
"```",
"",
"# Results",
"Discuss the results of the analyses, including any significant findings and implications.",
"",
"# Conclusion",
"Summarize the main conclusions drawn from the analyses, including any recommendations for further research or practical applications."
)
writeLines(initial_content, analyses_rmd_path)
message("4_analyses.Rmd has been created with initial content.")
} else {
# If the file exists, do nothing but print a message
message("4_analyses.Rmd already exists.")
}
if (!require("here")) install.packages("here")
library(here)
# Set current working directory to .rmd file location
setwd(here::here())
# Define the path to the .renv lockfile within the 'renv' folder
renv_lockfile <- file.path(getwd(), "renv.lock")
#Restore packages from renv lock file
if (!require("renv")) install.packages("renv")
renv::restore()
#Use the p_load function to install and load any desired packages that may not
#have been in the renv.lock file. Note, if the packages were already in the
#renv.lock file, that is okay. `p_load` will not change version number
#if (!require("pacman")) install.packages("pacman")
#pacman::p_load() #Insert packages in between parentheses
#Update the renv lock file
renv::snapshot()
if (!require("here")) install.packages("here")
library(here)
# Set current working directory to .rmd file location
setwd(here::here())
print(getwd())
if (!require("here")) install.packages("here")
library(here)
# Set current working directory to .rmd file location
setwd(here::here())
print(getwd())
# Define the path to the .renv lockfile within the 'renv' folder
renv_lockfile <- file.path(getwd(), "renv.lock")
#Restore packages from renv lock file
if (!require("renv")) install.packages("renv")
renv::restore()
if (!require("here")) install.packages("here")
library(here)
# Set current working directory to .rmd file location
setwd(here::here())
print(getwd())
# Define the path to the .renv lockfile within the 'renv' folder
renv_lockfile <- file.path(getwd(), "renv.lock")
#Restore packages from renv lock file
if (!require("renv")) install.packages("renv")
renv::restore()
# Use the p_load function to install and load any desired packages that may not
# have been in the renv.lock file. Note, if the packages were already in the
# renv.lock file, that is okay. `p_load` will not change version number
#if (!require("pacman")) install.packages("pacman")
#pacman::p_load() #Insert packages in between parentheses
# Update the renv lock file
renv::snapshot()
